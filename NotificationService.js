/**
 * created by ZhouRd on 2019/1/14
 */
import { Platform } from 'react-native';
//import PushNotification from 'react-native-push-notification';

export default class NotificationService {

  constructor(onNotification) {
    NotificationService.notificationConfigure(onNotification);

    this.lastId = 0;
  }

  static notificationConfigure(onNotification) {
    PushNotification.configure({

      // (required) Called when a remote or local notification is opened or received
      // onNotification: function (data) {
      //   log.i('push data: ', data);
      // },

      onNotification: onNotification,


      // Should the initial notification be popped automatically
      // default: true
      popInitialNotification: true,

      /**
       * (optional) default: true
       * - Specified if permissions (ios) and token (android and ios) will requested or not,
       * - if not, you must call PushNotificationsHandler.requestPermissions() later
       */
      requestPermissions: Platform.OS === 'ios',
    })
  }

  _localNotification(msgContent) {
    this.lastId++;
    PushNotification.localNotification({
      /* Android Only Properties */
      id: '' + this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: msgContent.bigText, // (optional) default: "message" prop

      /* iOS only properties */
      alertAction: 'view', // (optional) default: view
      category: null, // (optional) default: null
      userInfo: null, // (optional) default: null (object containing additional notification data)

      /* iOS and Android properties */
      title: msgContent.title, // (optional)
      message: msgContent.message, // (required)
      extraData: msgContent.extraData
    })
  }

  static checkPermission(cbk) {
    return PushNotification.checkPermissions(cbk);
  }

  static cancelNotif() {
    PushNotification.cancelLocalNotifications({ id: '' + this.lastId });
  }

  static cancelAll() {
    PushNotification.cancelAllLocalNotifications();
  }

}
